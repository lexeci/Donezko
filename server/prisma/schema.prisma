generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")
  email     String   @unique
  name      String
  password  String

  workInterval   Int? @default(50) @map("work_interval")
  breakInterval  Int? @default(10) @map("break_interval")
  intervalsCount Int? @default(7) @map("intervals_count")

  organizationUsers OrganizationUser[]
  tasks             Task[]
  timeBlocks        TimeBlock[]
  timerSessions     TimerSession[]
  teamUsers         TeamUser[]
  comments          Comment[]
  ChatParticipant   ChatParticipant[]
  Message           Message[]
  ProjectUser       ProjectUser[]

  @@map("user")
}

model Organization {
  id                String             @id @default(cuid())
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt() @map("updated_at")
  title             String             @unique
  description       String?
  joinCode          String?            @unique @map("join_code") // code for joining
  organizationUsers OrganizationUser[]
  projects          Project[]
  teams             Team[]

  @@map("organization")
}

model OrganizationUser {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  userId             String       @map("user_id")
  organizationId     String       @map("organization_id")
  user               User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization       Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationStatus AccessStatus @default(ACTIVE) @map("organization_status")

  role OrgRole @default(VIEWER) // The user role in org

  @@unique([userId, organizationId]) // Support of unique the join of user and org
  @@map("organization_user")
}

enum OrgRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

model Project {
  id            String        @id @default(cuid())
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt() @map("updated_at")
  title         String        @unique
  description   String
  projectStatus ProjectStatus @default(ONGOING) @map("project_status") // Статус проекту (наприклад, "ONGOING", "COMPLETED", "ON_HOLD")

  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  tasks        Task[]
  projectTeams ProjectTeam[] // зв’язок з командами
  projectUsers ProjectUser[] // Доданий зв'язок з ProjectUser
  Team         Team[]

  @@map("project")
}

enum ProjectStatus {
  ONGOING
  COMPLETED
  ON_HOLD
}

model ProjectUser {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  projectId String  @map("project_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  userId        String       @map("user_id")
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectStatus AccessStatus @default(ACTIVE) @map("project_status")

  role ProjectRole @default(MEMBER) // Додавання ролі користувача в проекті

  @@unique([projectId, userId])
  @@map("project_user")
}

enum ProjectRole {
  MANAGER // Менеджер проекту
  MEMBER // Звичайний учасник проекту
}

model ProjectTeam {
  id        String @id @default(cuid())
  projectId String
  teamId    String

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  team    Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([projectId, teamId])
}

model Team {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt() @map("updated_at")
  title       String   @unique
  description String

  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  teamUsers    TeamUser[]
  projectTeams ProjectTeam[] // Багато-до-багатьох зв’язок із проєктами через ProjectTeam

  tasks     Task[] // Завдання, які виконує команда
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String?

  @@map("team")
}

model TeamUser {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  userId     String       @map("user_id")
  teamId     String       @map("team_id")
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  team       Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamStatus AccessStatus @default(ACTIVE) @map("team_status")

  role TeamRole @default(MEMBER)

  @@unique([userId, teamId])
  @@map("team_user")
}

enum TeamRole {
  LEADER
  MEMBER
}

enum AccessStatus {
  BANNED
  ACTIVE
}

model Task {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt() @map("updated_at")
  dueDate   DateTime? @map("due_date") // Дата виконання задачі

  title       String
  priority    Priority?   @default(LOW)
  TaskStatus  TaskStatus? @default(NOT_STARTED) @map("task_status")
  isCompleted Boolean?    @default(false) @map("is_completed")
  description String?

  userId String? @map("user_id") // Конкретний відповідальний користувач
  user   User?   @relation(fields: [userId], references: [id])

  projectId String  @map("project_id") // Зв’язок із проектом
  project   Project @relation(fields: [projectId], references: [id])

  teamId String? @map("team_id") // Зв’язок із командою
  team   Team?   @relation(fields: [teamId], references: [id])

  comments Comment[] // Зв’язок із коментарями

  @@map("task")
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  content String
  userId  String @map("user_id") // Автор коментаря
  user    User   @relation(fields: [userId], references: [id])

  taskId String @map("task_id") // До якої таски належить
  task   Task   @relation(fields: [taskId], references: [id])

  @@map("comment")
}

model TimeBlock {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  title    String
  color    String?
  duration Int
  order    Int     @default(1)

  userId String? @map("user_id")
  user   User?   @relation(fields: [userId], references: [id])

  @@map("time_block")
}

model TimerSession {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  isCompleted Boolean? @default(false) @map("is_completed")

  userId String? @map("user_id")
  user   User?   @relation(fields: [userId], references: [id])

  rounds TimerRound[]

  @@map("timer_session")
}

model TimerRound {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  totalSeconds Int      @map("total_seconds")
  isCompleted  Boolean? @default(false) @map("is_completed")

  timerSession   TimerSession @relation(fields: [timerSessionId], references: [id], onDelete: Cascade)
  timerSessionId String       @map("timer_session_id")

  @@map("timer_round")
}

model Chat {
  id           String            @id @default(cuid())
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt() @map("updated_at")
  isPrivate    Boolean           @default(false) @map("is_private")
  participants ChatParticipant[]
  messages     Message[]

  @@map("chat")
}

model ChatParticipant {
  id String @id @default(cuid())

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  chatId String @map("chat_id")
  chat   Chat   @relation(fields: [chatId], references: [id])

  @@unique([userId, chatId])
  @@map("chat_participant")
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")
  content   String

  chatId String @map("chat_id")
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

  senderId String @map("sender_id")
  sender   User   @relation(fields: [senderId], references: [id])

  @@map("message")
}
