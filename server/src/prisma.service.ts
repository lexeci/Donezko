import { Injectable, OnModuleInit } from '@nestjs/common'; // Importing NestJS decorators and interfaces
import { PrismaClient } from '@prisma/client'; // Importing PrismaClient to interact with the database

/**
 * PrismaService - A service to handle database connections and operations using Prisma.
 *
 * This service extends the PrismaClient class, which is automatically generated by Prisma ORM.
 * It is responsible for managing the lifecycle of the Prisma Client, including establishing a
 * connection to the database when the module is initialized.
 *
 * The service implements the `OnModuleInit` interface, ensuring that the Prisma Client
 * connects to the database during the initialization of the module.
 *
 * @module PrismaService
 */
@Injectable() // Marks the class as a service that can be injected into other modules
export class PrismaService extends PrismaClient implements OnModuleInit {
	/**
	 * onModuleInit - Lifecycle hook that runs when the module is initialized.
	 *
	 * This method is called automatically by NestJS when the module is initialized.
	 * It establishes a connection to the database using the `$connect` method of PrismaClient.
	 *
	 * The connection ensures that the Prisma Client is ready to perform database operations
	 * as soon as the module is initialized.
	 *
	 * @returns {Promise<void>} A promise that resolves when the connection is established.
	 */
	async onModuleInit() {
		// Establish a connection to the Prisma client (database) when the module is initialized
		await this.$connect();
	}
}
